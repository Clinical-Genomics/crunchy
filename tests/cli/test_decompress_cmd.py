"""Tests for decompress command"""
import pathlib
import shutil

from click.testing import CliRunner

from crunchy.cli.decompress_cmd import decompress, spring
from crunchy.files import fastq_outpaths


def nr_files(dirpath: pathlib.Path) -> int:
    """Count the number of files in a directory"""
    nr_files_indir = 0
    for path in dirpath.iterdir():
        if not path.is_file():
            continue
        nr_files_indir += 1
    return nr_files_indir


def test_decompress_cmd():
    """Test to run the compress base command"""
    # GIVEN a cli runner
    runner = CliRunner()
    # WHEN running the compress command with dry_run
    result = runner.invoke(decompress, obj={})
    # THEN assert the command was succesful even without a valid api
    assert result.exit_code == 0


def test_decompress_spring_non_existing_spring(base_context, spring_tmp_path):
    """Test to run the compress base command"""
    # GIVEN a cli runner
    runner = CliRunner()
    # WHEN running the de compress command with non existing spring file
    result = runner.invoke(spring, [spring_tmp_path], obj=base_context)
    # THEN assert the command fails since the spring file needs to exist
    assert result.exit_code == 1


def test_decompress_spring_non_existing_spring_dry_run(base_context, spring_tmp_path):
    """Test to run the compress base command"""
    # GIVEN a cli runner
    runner = CliRunner()
    # WHEN running the de compress command with non existing spring file
    result = runner.invoke(
        spring, [str(spring_tmp_path), "--dry-run"], obj=base_context
    )
    # THEN assert the command fails since file does not exist
    assert result.exit_code == 2


def test_decompress_spring_no_fastq(spring_tmp_file, base_context):
    """Test to run the compress base command"""
    # GIVEN a cli runner
    runner = CliRunner()
    # WHEN running the decompress command without fastq files
    result = runner.invoke(spring, [str(spring_tmp_file)], obj=base_context)
    # THEN assert the command was succesful
    assert result.exit_code == 0


def test_decompress_spring_no_fastq_existing_paths(
    spring_tmp_file, first_read, second_read, base_context
):
    """Test to run the compress base command"""
    # GIVEN a cli runner and the path to an existing spring file
    runner = CliRunner()
    # GIVEN two existing fastq files
    fastqs = fastq_outpaths(spring_tmp_file)
    first = fastqs[0]
    second = fastqs[1]
    shutil.copy(str(first_read), str(first))
    shutil.copy(str(second_read), str(second))
    assert first.exists()
    # WHEN running the decompress command without fastq files
    result = runner.invoke(spring, [str(spring_tmp_file)], obj=base_context)
    # THEN assert the command fails since the autogenerated fastq files exists
    assert result.exit_code == 1


def test_decompress_spring_with_fastq(
    spring_tmp_file, first_tmp_path, second_tmp_path, base_context
):
    """Test to run the compress base command"""
    # GIVEN a cli runner
    runner = CliRunner()
    # WHEN running the decompress command with fastq files
    result = runner.invoke(
        spring,
        [str(spring_tmp_file), "-f", str(first_tmp_path), "-s", str(second_tmp_path)],
        obj=base_context,
    )
    # THEN assert the command was succesful
    assert result.exit_code == 0


def test_decompress_spring_with_fastq_real_run(
    spring_tmp_file, first_tmp_path, second_tmp_path, real_base_context
):
    """Test to run the decompress spring command"""
    # GIVEN a cli runner
    runner = CliRunner()
    dir_path = spring_tmp_file.parent
    # GIVEN a directory with one spring file
    assert nr_files(dir_path) == 1
    # WHEN running the decompress command with real data
    result = runner.invoke(
        spring,
        [str(spring_tmp_file), "-f", str(first_tmp_path), "-s", str(second_tmp_path)],
        obj=real_base_context,
    )
    # THEN assert the command was succesful
    assert result.exit_code == 0
    # THEN assert that the fastq files are created
    assert nr_files(dir_path) == 3
    assert first_tmp_path.exists()
    assert second_tmp_path.exists()
